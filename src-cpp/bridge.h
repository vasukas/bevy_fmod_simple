#ifndef BRIDGE_H
#define BRIDGE_H

#include <memory>
#include <unordered_map>
#include <vector>

#include "../fmod/include/fmod.hpp"

// Forward declarations for structs generated by cxx-bridge.
// See bridge.rs for description
struct InitParams;
struct EngineParams;
struct GroupParams;
struct AudioFileParams;
struct ChannelParams;
struct ChannelUpdateParams;
struct ListenerParams;
struct Geometry;
struct Reverb;

// Interface - FMOD wrapper.
// Visible by Rust.
struct Bridge {
	FMOD::System* system = {};
	FMOD_RESULT result;

	std::unordered_map<int, FMOD::ChannelGroup*> groups;

	// These are sparsed arrays - new values will fill vacant (nullptr) places if available,
	// instead of increasing vector size.
	// Array indices are used as IDs (called EngineId in Rust plugin).
	
	std::vector<FMOD::Sound*> sounds;
	std::vector<FMOD::Channel*> channels;
	std::vector<FMOD::Geometry*> geometries;
	std::vector<FMOD::Reverb3D*> reverbs;

	/// Returns false on error. Must be called only once per bridge lifetime.
	bool init(InitParams params);
	~Bridge();

	/// Creates group with default parameters if it doesn't exist
	FMOD::ChannelGroup* get_group(int user_id);

	//
	// Methods visible in Rust
	//

	/// Should be called frequently to update various internal states
	void update();
	void update_engine(EngineParams params);

	/// Sets new 3D listener state (where user's "ears" are in the world).
    void update_listener(ListenerParams params);
	/// Creates group if it doesn't exist
	void update_group(GroupParams params);

	/// Load sound into engine. Returns ID or -1 on error
	int load_audio_file(AudioFileParams params);
	/// Unload sound. ID will be reused
	void free_audio_file(int id);

	/// Play sound. Returns ID or -1 on error or -2 if sound is not tracked.
	/// ID won't be reused until 'free_channel' is called.
	int play_channel(ChannelParams params);
	/// Change parameters of playing sound. Returns false if sound stopped
	bool update_channel(int id, ChannelUpdateParams params);
	/// Returns true if sound is currently playing, or false otherwise
	bool is_playing_channel(int id);
	/// Stops playback. ID will be reused.
	void free_channel(int id);

	/// 3D-world occlusion geometry. Returns ID or -1 on error.
	/// Geometry between a sound and the listener will decrease sound's volume.
	/// Geometry between a sound and a center of reverb sphere will decrease reverb effect.
    int add_geometry(Geometry params);
	/// ID will be reused
    void free_geometry(int id);

	/// 3D-world reverb sphere. Returns ID or -1 on error.
	/// Will apply reverb effect to sounds within the sphere.
	/// Effect can be occluded by geometry, see add_geometry for more info.
    int add_reverb(Reverb params);
	/// ID will be reused
    void free_reverb(int id);
};

/// Create new bridge; initializes it.
/// Only one bridge can exist at the same time!
/// Returns nullptr on error.
std::unique_ptr<Bridge> create(InitParams params);

#endif // BRIDGE_H
